{"ast":null,"code":"export const loginRootUser = async payload => {\n  //--------------------------- LOGIN ROOT USER -------------\n  const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/auth/root/login\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: payload.email,\n      password: payload.password\n    })\n  });\n  const user = await res.json();\n  return user;\n};\nexport const passwordReset = async email => {\n  // ----------------------- PASSWORD RESET REQUEST ----------------\n  const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/requestpasswordreset\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email\n    })\n  });\n  const passwordResetStatus = await res.json();\n  return passwordResetStatus;\n};\nexport const passwordResetWithKey = async payload => {\n  // ----------------------- PASSWORD RESET ----------------\n  const res = await fetch(`http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/resetpasword/${payload.key}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password: payload.password\n    })\n  });\n  const passwordResetStatus = await res.json();\n  return passwordResetStatus;\n};\nexport const getPractice = async (url, token) => {\n  // ----------------------- PASSWORD RESET ----------------\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      \"Authorization\": token\n    }\n  });\n  const data = await res.json();\n  return data;\n};\nexport const approvePractice = async (url, token) => {\n  // ----------------------- PASSWORD RESET ----------------\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Authorization\": token\n    },\n    body: {\n      \"approvalStatus\": \"approved\"\n    }\n  });\n  const data = await res.json();\n  return data;\n};\nexport const rejectPractice = async (url, token) => {\n  // ----------------------- PASSWORD RESET ----------------\n  console.log(token);\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Authorization\": token\n    },\n    body: {\n      \"approvalStatus\": \"rejected\"\n    }\n  });\n  const data = await res.json();\n  return data;\n};\nexport const loginPractice = async payload => {\n  //--------------------------- LOGIN PRACTICE -------------\n  const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/auth/practices/login\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: payload.email,\n      password: payload.password\n    })\n  });\n  const user = await res.json();\n  return user;\n};\nexport const validateRootToken = async token => {\n  //--------------------------VALIDATE TOKEN ---------------------\n  const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/checktoken\", {\n    method: 'GET',\n    headers: {\n      'Authorization': token\n    }\n  });\n  const user = await res.json();\n  return user;\n};","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/Api.js"],"names":["loginRootUser","payload","res","fetch","method","headers","body","JSON","stringify","email","password","user","json","passwordReset","passwordResetStatus","passwordResetWithKey","key","getPractice","url","token","data","approvePractice","rejectPractice","console","log","loginPractice","validateRootToken"],"mappings":"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","sourcesContent":["\n\n\nexport const loginRootUser = async (payload) => {//--------------------------- LOGIN ROOT USER -------------\n\t\n    const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/auth/root/login\", {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({\n\t\t\temail: payload.email,\n\t\t\tpassword: payload.password\n\t \t})\n\t});\n\n    const user = await res.json();\n\treturn user;\n}\n\n\n\nexport const passwordReset = async (email) => {// ----------------------- PASSWORD RESET REQUEST ----------------\n\t\n    const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/requestpasswordreset\", {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({\n\t\t\temail: email\n\t \t})\n\t});\n\n    const passwordResetStatus = await res.json();\n\treturn passwordResetStatus;\n}\n\n\nexport const passwordResetWithKey = async (payload) => {// ----------------------- PASSWORD RESET ----------------\n\t\n    const res = await fetch(`http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/resetpasword/${payload.key}`, {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({\n\t\t\tpassword: payload.password\n\t \t})\n\t});\n\n    const passwordResetStatus = await res.json();\n\treturn passwordResetStatus;\n}\n\n\nexport const getPractice = async (url, token) => {// ----------------------- PASSWORD RESET ----------------\n\t\n    const res = await fetch(url,{\n    \tmethod: 'GET',\n    \theaders: {\"Authorization\": token}\n    });\n\n    const data = await res.json();\n\treturn data;\n}\n\nexport const approvePractice = async (url, token) => {// ----------------------- PASSWORD RESET ----------------\n\t\n    const res = await fetch(url,{\n    \tmethod: 'POST',\n    \theaders: {\"Authorization\": token},\n    \tbody:{\n\t\t\t\"approvalStatus\": \"approved\"\n\t\t}\n    });\n\n    const data = await res.json();\n\treturn data;\n}\n\nexport const rejectPractice = async (url, token) => {// ----------------------- PASSWORD RESET ----------------\n\tconsole.log(token)\n    const res = await fetch(url,{\n    \tmethod: 'POST',\n    \theaders: {\"Authorization\": token},\n    \tbody:{\n\t\t\t\"approvalStatus\": \"rejected\"\n\t\t}\n    });\n\n    const data = await res.json();\n\treturn data;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const loginPractice = async (payload) => {//--------------------------- LOGIN PRACTICE -------------\n\t\n    const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/auth/practices/login\", {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({\n\t\t\temail: payload.email,\n\t\t\tpassword: payload.password\n\t \t})\n\t});\n\n    const user = await res.json();\n\treturn user;\n}\n\n\n\n\n\n\n\n\n\nexport const validateRootToken = async (token) => {//--------------------------VALIDATE TOKEN ---------------------\n\t\n    const res = await fetch(\"http://practxbestaging-env.eba-6m7puu5w.us-east-2.elasticbeanstalk.com/api/root/checktoken\", \n    {\n\t\tmethod: 'GET',\n\t\theaders: { 'Authorization': token }\n\t});\n\n    const user = await res.json();\n\treturn user;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as t from \"../constants\";\nimport * as Api from '../Api.js'; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* loginRootUser(action) {\n  try {\n    const user = yield call(Api.loginUser, action.payload);\n    yield put({\n      type: t.ROOT_USER_LOGIN,\n      user: user.root,\n      token: user.token\n    });\n    action.payload.history.push(\"/dashboard\");\n  } catch (e) {\n    console.log(e, \"Can not login from saggaggaggag\");\n  }\n}\n\nexport function* mywatchLogin() {\n  yield takeLatest(\"RLOGIN\", loginRootUser);\n}\n\nfunction* mySaga() {\n  yield all([fork(mywatchLogin)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/saga/sagas.js"],"names":["call","put","takeEvery","takeLatest","t","Api","loginRootUser","action","user","loginUser","payload","type","ROOT_USER_LOGIN","root","token","history","push","e","console","log","mywatchLogin","mySaga","all","fork","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAO,KAAKC,CAAZ,MAAmB,cAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB,C,CAEA;;AACA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAE7B,MAAI;AACL,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACK,GAAG,CAACI,SAAL,EAAgBF,MAAM,CAACG,OAAvB,CAAvB;AACG,UAAMT,GAAG,CAAC;AAACU,MAAAA,IAAI,EAAEP,CAAC,CAACQ,eAAT;AAA0BJ,MAAAA,IAAI,EAAEA,IAAI,CAACK,IAArC;AAA2CC,MAAAA,KAAK,EAACN,IAAI,CAACM;AAAtD,KAAD,CAAT;AACHP,IAAAA,MAAM,CAACG,OAAP,CAAeK,OAAf,CAAuBC,IAAvB,CAA4B,YAA5B;AAEE,GALD,CAKE,OAAOC,CAAP,EAAU;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAAe,iCAAf;AACA;AACH;;AAED,OAAO,UAAUG,YAAV,GAAyB;AAC9B,QAAMjB,UAAU,CAAC,QAAD,EAAWG,aAAX,CAAhB;AACD;;AAGD,UAAUe,MAAV,GAAmB;AACf,QAAMC,GAAG,CAAC,CACZC,IAAI,CAACH,YAAD,CADQ,CAAD,CAAT;AAGH;;AAED,eAAeI,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as t from \"../constants\";\nimport * as Api from '../Api.js';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* loginRootUser(action) {\n\n   try {\n\t\tconst user = yield call(Api.loginUser, action.payload);\n    \tyield put({type: t.ROOT_USER_LOGIN, user: user.root, token:user.token});\n\t\taction.payload.history.push(\"/dashboard\")\n\n   } catch (e) {\n\t   console.log(e, \"Can not login from saggaggaggag\")\n   }\n}\n\nexport function* mywatchLogin() {\n  yield takeLatest(\"RLOGIN\", loginRootUser);\n}\n\n\nfunction* mySaga() {\n    yield all([\n\t\tfork(mywatchLogin)\n    ]);\n}\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}
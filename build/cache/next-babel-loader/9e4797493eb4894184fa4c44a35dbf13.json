{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n  try {\n    const user = yield call(Api.loginRootUser, action.payload);\n\n    if (user.message === \"Login successful!\") {\n      yield put(Actions.loginRootUserSuccess(user));\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/dashboard/dashboard\"\n        });\n      });\n    } else {\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/\"\n        });\n      });\n    }\n  } catch (e) {\n    console.log(e, \"Can not login from saggaggaggag\");\n  }\n}\n\nfunction* rootLoginWatcher() {\n  /* --------------- LOGIN WATCHER ---------------------------*/\n  yield takeLatest(t.ROOT_LOGIN_WATCHER, loginRootUser);\n}\n/*------------------------LOGOUT SAGA --------------------------------*/\n\n\nfunction* logoutUser(action) {\n  try {\n    yield put(Actions.logoutUser());\n    yield call(() => action.payload.push(\"/\"));\n  } catch (e) {\n    console.log(\"Error Trying to LogOut\");\n  }\n}\n\nfunction* logoutWatcher() {\n  /* --------------- LOGOUT WATCHER ---------------------------*/\n  yield takeLatest(t.LOGOUT_WATCHER, logoutUser);\n}\n/*-------------------------------------------- PASSWORD RESET ------------------------------------*/\n\n\nfunction* passwordReset(action) {\n  const {\n    message\n  } = yield call(Api.passwordReset, action.payload.email);\n  console.log(\"Saga called,\");\n\n  try {\n    yield put(Actions.forgetPasswordRequest(message));\n  } catch (e) {\n    console.log(\"password reset error\", e);\n  }\n}\n\nfunction* passwordResetWatcher() {\n  /* --------------- LOGOUT WATCHER ---------------------------*/\n  yield takeLatest(t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER, passwordReset);\n}\n\nfunction* authSaga() {\n  yield all([fork(rootLoginWatcher), fork(logoutWatcher), fork(passwordResetWatcher)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/auth/sagas.js"],"names":["call","put","takeEvery","takeLatest","all","fork","t","Api","Actions","loginRootUser","action","user","payload","message","loginRootUserSuccess","router","push","pathname","e","console","log","rootLoginWatcher","ROOT_LOGIN_WATCHER","logoutUser","logoutWatcher","LOGOUT_WATCHER","passwordReset","email","forgetPasswordRequest","passwordResetWatcher","ROOT_USER_PASSWORD_RESET_REQ_WATCHER","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,EAAgDC,IAAhD,QAA2D,oBAA3D;AACA,OAAO,KAAKC,CAAZ,MAAmB,aAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAIA;;AAEA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAE7B,MAAI;AAEL,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACO,GAAG,CAACE,aAAL,EAAoBC,MAAM,CAACE,OAA3B,CAAvB;;AAGE,QAAID,IAAI,CAACE,OAAL,KAAiB,mBAArB,EAAyC;AAGrC,YAAMZ,GAAG,CAACO,OAAO,CAACM,oBAAR,CAA6BH,IAA7B,CAAD,CAAT;AAEA,YAAMX,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACE,OAAP,CAAeG,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AASD,KAdH,MAcO;AAED,YAAMjB,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACE,OAAP,CAAeG,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AAQH;AAGH,GAhCD,CAgCE,OAAOC,CAAP,EAAU;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAAe,iCAAf;AACA;AACH;;AAED,UAAUG,gBAAV,GAA6B;AAAE;AAE7B,QAAMlB,UAAU,CAACG,CAAC,CAACgB,kBAAH,EAAuBb,aAAvB,CAAhB;AAED;AAUD;;;AAGA,UAAUc,UAAV,CAAqBb,MAArB,EAA4B;AAE1B,MAAG;AACD,UAAMT,GAAG,CAACO,OAAO,CAACe,UAAR,EAAD,CAAT;AACA,UAAMvB,IAAI,CAAC,MAAIU,MAAM,CAACE,OAAP,CAAeI,IAAf,CAAoB,GAApB,CAAL,CAAV;AAED,GAJD,CAIC,OAAME,CAAN,EAAQ;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AAEF;;AAED,UAAUI,aAAV,GAA0B;AAAE;AAE1B,QAAMrB,UAAU,CAACG,CAAC,CAACmB,cAAH,EAAmBF,UAAnB,CAAhB;AAED;AASD;;;AAGA,UAAUG,aAAV,CAAwBhB,MAAxB,EAA+B;AAE7B,QAAM;AAACG,IAAAA;AAAD,MAAY,MAAMb,IAAI,CAACO,GAAG,CAACmB,aAAL,EAAoBhB,MAAM,CAACE,OAAP,CAAee,KAAnC,CAA5B;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AAEA,MAAG;AAED,UAAMnB,GAAG,CAACO,OAAO,CAACoB,qBAAR,CAA8Bf,OAA9B,CAAD,CAAT;AAED,GAJD,CAIC,OAAMK,CAAN,EAAQ;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAqCF,CAArC;AACD;AAEF;;AAED,UAAUW,oBAAV,GAAiC;AAAE;AAEjC,QAAM1B,UAAU,CAACG,CAAC,CAACwB,oCAAH,EAAyCJ,aAAzC,CAAhB;AAED;;AASD,UAAUK,QAAV,GAAqB;AACjB,QAAM3B,GAAG,CAAC,CACNC,IAAI,CAACgB,gBAAD,CADE,EAENhB,IAAI,CAACmB,aAAD,CAFE,EAGNnB,IAAI,CAACwB,oBAAD,CAHE,CAAD,CAAT;AAKH;;AAGD,eAAeE,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest, all, fork} from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n\n\n\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n\n   try {\n\n\t\tconst user = yield call(Api.loginRootUser, action.payload);\n\n\n    if (user.message === \"Login successful!\"){\n\n\n        yield put(Actions.loginRootUserSuccess(user));\n\n        yield call(()=>{\n\n                action.payload.router.push({\n                  pathname:\"/dashboard/dashboard\"\n                })\n\n            }\n        );\n\n      }else{\n\n          yield call(()=>{\n\n                  action.payload.router.push({\n                    pathname:\"/\"\n                  })\n\n              }\n          );\n      }\n    \t\n\n   } catch (e) {\n\t   console.log(e, \"Can not login from saggaggaggag\")\n   }\n}\n\nfunction* rootLoginWatcher() { /* --------------- LOGIN WATCHER ---------------------------*/\n\n  yield takeLatest(t.ROOT_LOGIN_WATCHER, loginRootUser);\n\n}\n\n\n\n\n\n\n\n\n\n/*------------------------LOGOUT SAGA --------------------------------*/\n\n\nfunction* logoutUser(action){\n  \n  try{\n    yield put(Actions.logoutUser());\n    yield call(()=>action.payload.push(\"/\"));\n\n  }catch(e){\n    console.log(\"Error Trying to LogOut\")\n  }\n  \n}\n\nfunction* logoutWatcher() { /* --------------- LOGOUT WATCHER ---------------------------*/\n\n  yield takeLatest(t.LOGOUT_WATCHER, logoutUser);\n\n}\n\n\n\n\n\n\n\n\n/*-------------------------------------------- PASSWORD RESET ------------------------------------*/\n\n\nfunction* passwordReset(action){\n\n  const {message} = yield call(Api.passwordReset, action.payload.email);\n\n  console.log(\"Saga called,\")\n  \n  try{\n\n    yield put(Actions.forgetPasswordRequest(message));\n\n  }catch(e){\n    console.log(\"password reset error\" , e)\n  }\n  \n}\n\nfunction* passwordResetWatcher() { /* --------------- LOGOUT WATCHER ---------------------------*/\n\n  yield takeLatest(t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER, passwordReset);\n\n}\n\n\n\n\n\n\n\n\nfunction* authSaga() {\n    yield all([\n        fork(rootLoginWatcher),\n        fork(logoutWatcher),\n        fork(passwordResetWatcher)\n    ]);\n}\n\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as t from \"./constants\";\n/*--------------------------LOG IN OPTIONS ------------------------*/\n\nexport const loginRootUser = (email, password, router) => {\n  return {\n    type: t.ROOT_LOGIN_WATCHER,\n    payload: {\n      email,\n      password,\n      router\n    }\n  };\n};\nexport const loginRootUserSuccess = userData => {\n  console.log(\"Reducer action for login called \");\n  return {\n    type: t.ROOT_USER_LOGIN,\n    payload: userData\n  };\n};\n/*-------------------------- LOG OUT -------------------------------*/\n\nexport const logoutUser = () => {\n  return {\n    type: t.ROOT_USER_LOGOUT\n  };\n};\nexport const logoutSaga = router => {\n  return {\n    type: t.LOGOUT_WATCHER,\n    payload: router\n  };\n};\n/* --------------------------- ROOT PASSWORD RESET ---------------------------*/\n\nexport const forgetPasswordRequestSaga = email => {\n  return {\n    type: t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER,\n    payload: {\n      email\n    }\n  };\n};\nexport const forgetPasswordRequest = passwordResetStatus => ({\n  type: t.ROOT_USER_PASSWORD_RESET_REQ,\n  payload: passwordResetStatus\n});\n/*------------- ROOT PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const passwordResetWithKey = passwordResetMessage => ({\n  type: t.ROOT_USER_PASSWORD_RESET,\n  payload: passwordResetMessage\n});\nexport const passwordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n  type: t.ROOT_PASSWORD_RESET_WATCHER,\n  payload: {\n    password: newPassword,\n    key: passwordResetKey\n  }\n});\nexport const apiError = error => ({\n  type: API_FAILED,\n  payload: error\n});","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/auth/actions.js"],"names":["t","loginRootUser","email","password","router","type","ROOT_LOGIN_WATCHER","payload","loginRootUserSuccess","userData","console","log","ROOT_USER_LOGIN","logoutUser","ROOT_USER_LOGOUT","logoutSaga","LOGOUT_WATCHER","forgetPasswordRequestSaga","ROOT_USER_PASSWORD_RESET_REQ_WATCHER","forgetPasswordRequest","passwordResetStatus","ROOT_USER_PASSWORD_RESET_REQ","passwordResetWithKey","passwordResetMessage","ROOT_USER_PASSWORD_RESET","passwordResetWithKeySaga","passwordResetKey","newPassword","ROOT_PASSWORD_RESET_WATCHER","key","apiError","error","API_FAILED"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,aAAnB;AAGA;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,KAA6B;AAEtD,SAAO;AACHC,IAAAA,IAAI,EAAEL,CAAC,CAACM,kBADL;AAEHC,IAAAA,OAAO,EAAE;AAAEL,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB;AAFN,GAAP;AAKH,CAPM;AASP,OAAO,MAAMI,oBAAoB,GAAIC,QAAD,IAAc;AAE9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAEA,SAAO;AACHN,IAAAA,IAAI,EAAEL,CAAC,CAACY,eADL;AAEHL,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAKH,CATM;AAYP;;AAEA,OAAO,MAAMI,UAAU,GAAG,MAAM;AAE5B,SAAO;AACHR,IAAAA,IAAI,EAAEL,CAAC,CAACc;AADL,GAAP;AAGH,CALM;AAOP,OAAO,MAAMC,UAAU,GAAIX,MAAD,IAAY;AAElC,SAAO;AACHC,IAAAA,IAAI,EAAEL,CAAC,CAACgB,cADL;AAEHT,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAKH,CAPM;AASP;;AAGA,OAAO,MAAMa,yBAAyB,GAAIf,KAAD,IAAW;AAEhD,SAAM;AACFG,IAAAA,IAAI,EAAEL,CAAC,CAACkB,oCADN;AAEFX,IAAAA,OAAO,EAAE;AAAEL,MAAAA;AAAF;AAFP,GAAN;AAKH,CAPM;AASP,OAAO,MAAMiB,qBAAqB,GAAIC,mBAAD,KAA0B;AAC3Df,EAAAA,IAAI,EAAEL,CAAC,CAACqB,4BADmD;AAE3Dd,EAAAA,OAAO,EAAEa;AAFkD,CAA1B,CAA9B;AAKP;;AAEA,OAAO,MAAME,oBAAoB,GAAIC,oBAAD,KAA2B;AAC3DlB,EAAAA,IAAI,EAAEL,CAAC,CAACwB,wBADmD;AAE3DjB,EAAAA,OAAO,EAAEgB;AAFkD,CAA3B,CAA7B;AAKP,OAAO,MAAME,wBAAwB,GAAG,CAACC,gBAAD,EAAmBC,WAAnB,MAAoC;AACxEtB,EAAAA,IAAI,EAAEL,CAAC,CAAC4B,2BADgE;AAExErB,EAAAA,OAAO,EAAE;AACLJ,IAAAA,QAAQ,EAAEwB,WADL;AAELE,IAAAA,GAAG,EAAEH;AAFA;AAF+D,CAApC,CAAjC;AAcP,OAAO,MAAMI,QAAQ,GAAIC,KAAD,KAAY;AAChC1B,EAAAA,IAAI,EAAE2B,UAD0B;AAEhCzB,EAAAA,OAAO,EAAEwB;AAFuB,CAAZ,CAAjB","sourcesContent":["import * as t from \"./constants\";\n\n\n/*--------------------------LOG IN OPTIONS ------------------------*/\n\nexport const loginRootUser = (email, password, router) => {\n\n    return {\n        type: t.ROOT_LOGIN_WATCHER,\n        payload: { email, password, router }\n    }\n    \n};\n\nexport const loginRootUserSuccess = (userData) => {\n\n    console.log(\"Reducer action for login called \")\n\n    return {\n        type: t.ROOT_USER_LOGIN,\n        payload: userData    \n    }\n    \n};\n\n\n/*-------------------------- LOG OUT -------------------------------*/\n\nexport const logoutUser = () => {\n\n    return {\n        type: t.ROOT_USER_LOGOUT\n    }\n};\n\nexport const logoutSaga = (router) => {\n\n    return {\n        type: t.LOGOUT_WATCHER,\n        payload: router\n    }\n    \n};\n\n/* --------------------------- ROOT PASSWORD RESET ---------------------------*/\n\n\nexport const forgetPasswordRequestSaga = (email) => {\n    \n    return{\n        type: t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER,\n        payload: { email }\n    }\n    \n}\n\nexport const forgetPasswordRequest = (passwordResetStatus) => ({\n    type: t.ROOT_USER_PASSWORD_RESET_REQ,\n    payload: passwordResetStatus\n});\n\n/*------------- ROOT PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const passwordResetWithKey = (passwordResetMessage) => ({\n    type: t.ROOT_USER_PASSWORD_RESET,\n    payload: passwordResetMessage\n});\n\nexport const passwordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n    type: t.ROOT_PASSWORD_RESET_WATCHER,\n    payload: {\n        password: newPassword,\n        key: passwordResetKey\n    }\n});\n\n\n\n\n\n\n\nexport const apiError = (error) => ({\n    type: API_FAILED,\n    payload: error\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as t from \"./constants\";\n/*--------------------------LOG IN ROOT USER ------------------------*/\n\nexport const loginRootUser = (email, password, router) => {\n  return {\n    type: t.ROOT_LOGIN_WATCHER,\n    payload: {\n      email,\n      password,\n      router\n    }\n  };\n};\nexport const loginRootUserSuccess = userData => {\n  return {\n    type: t.ROOT_USER_LOGIN,\n    payload: userData\n  };\n};\n/*-------------------------- LOG OUT ROOT USER-------------------------------*/\n\nexport const logoutUser = () => {\n  return {\n    type: t.ROOT_USER_LOGOUT\n  };\n};\nexport const logoutSaga = router => {\n  return {\n    type: t.LOGOUT_WATCHER,\n    payload: router\n  };\n};\n/* --------------------------- ROOT PASSWORD RESET ---------------------------*/\n\nexport const forgetPasswordRequestSaga = email => {\n  return {\n    type: t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER,\n    payload: {\n      email\n    }\n  };\n};\nexport const forgetPasswordRequest = passwordResetStatus => ({\n  type: t.ROOT_USER_PASSWORD_RESET_REQ,\n  payload: passwordResetStatus\n});\n/*------------- ROOT PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const passwordResetWithKey = passwordResetMessage => ({\n  type: t.ROOT_USER_PASSWORD_RESET,\n  payload: passwordResetMessage\n});\nexport const passwordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n  type: t.ROOT_PASSWORD_RESET_WATCHER,\n  payload: {\n    password: newPassword,\n    key: passwordResetKey\n  }\n});\n/*--------------------------LOG IN PRACTICE ------------------------*/\n\nexport const loginPractice = (email, password, router) => {\n  return {\n    type: t.PRACTICE_LOGIN_WATCHER,\n    payload: {\n      email,\n      password,\n      router\n    }\n  };\n};\nexport const loginPracticeSuccess = userData => {\n  console.log(\"Reducer action for login called \");\n  return {\n    type: t.PRACTICE_USER_LOGIN,\n    payload: userData\n  };\n};\nexport const logoutPractice = () => {\n  return {\n    type: t.PRACTICE_USER_LOGOUT\n  };\n};\nexport const logoutPracticeSaga = router => {\n  return {\n    type: t.PRACTICE_LOGOUT_WATCHER,\n    payload: router\n  };\n};\n/* --------------------------- PRACTICE PASSWORD RESET ---------------------------*/\n\nexport const practiceForgetPasswordRequestSaga = email => {\n  return {\n    type: t.PRACTICE_USER_PASSWORD_RESET_REQ_WATCHER,\n    payload: {\n      email\n    }\n  };\n};\nexport const practiceForgetPasswordRequest = passwordResetStatus => ({\n  type: t.PRACTICE_USER_PASSWORD_RESET_REQ,\n  payload: passwordResetStatus\n});\n/*------------- PRACTICE PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const practicePasswordResetWithKey = passwordResetMessage => ({\n  type: t.PRACTICE_USER_PASSWORD_RESET,\n  payload: passwordResetMessage\n});\nexport const practicePasswordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n  type: t.PRACTICE_PASSWORD_RESET_WATCHER,\n  payload: {\n    password: newPassword,\n    key: passwordResetKey\n  }\n});\nexport const apiError = error => ({\n  type: API_FAILED,\n  payload: error\n});","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/auth/actions.js"],"names":["t","loginRootUser","email","password","router","type","ROOT_LOGIN_WATCHER","payload","loginRootUserSuccess","userData","ROOT_USER_LOGIN","logoutUser","ROOT_USER_LOGOUT","logoutSaga","LOGOUT_WATCHER","forgetPasswordRequestSaga","ROOT_USER_PASSWORD_RESET_REQ_WATCHER","forgetPasswordRequest","passwordResetStatus","ROOT_USER_PASSWORD_RESET_REQ","passwordResetWithKey","passwordResetMessage","ROOT_USER_PASSWORD_RESET","passwordResetWithKeySaga","passwordResetKey","newPassword","ROOT_PASSWORD_RESET_WATCHER","key","loginPractice","PRACTICE_LOGIN_WATCHER","loginPracticeSuccess","console","log","PRACTICE_USER_LOGIN","logoutPractice","PRACTICE_USER_LOGOUT","logoutPracticeSaga","PRACTICE_LOGOUT_WATCHER","practiceForgetPasswordRequestSaga","PRACTICE_USER_PASSWORD_RESET_REQ_WATCHER","practiceForgetPasswordRequest","PRACTICE_USER_PASSWORD_RESET_REQ","practicePasswordResetWithKey","PRACTICE_USER_PASSWORD_RESET","practicePasswordResetWithKeySaga","PRACTICE_PASSWORD_RESET_WATCHER","apiError","error","API_FAILED"],"mappings":"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","sourcesContent":["import * as t from \"./constants\";\n\n\n/*--------------------------LOG IN ROOT USER ------------------------*/\n\nexport const loginRootUser = (email, password, router) => {\n\n    return{\n        type: t.ROOT_LOGIN_WATCHER,\n        payload: { email, password, router }     \n    }\n};\n\nexport const loginRootUserSuccess = (userData) => {\n    return{\n        type: t.ROOT_USER_LOGIN,\n        payload: userData   \n    }\n};\n\n\n/*-------------------------- LOG OUT ROOT USER-------------------------------*/\n\nexport const logoutUser = () => {\n\n    return {\n        type: t.ROOT_USER_LOGOUT\n    }\n};\n\nexport const logoutSaga = (router) => {\n\n    return {\n        type: t.LOGOUT_WATCHER,\n        payload: router\n    }\n    \n};\n\n/* --------------------------- ROOT PASSWORD RESET ---------------------------*/\n\n\nexport const forgetPasswordRequestSaga = (email) => {\n    \n    return{\n        type: t.ROOT_USER_PASSWORD_RESET_REQ_WATCHER,\n        payload: { email }\n    }\n    \n}\n\nexport const forgetPasswordRequest = (passwordResetStatus) => ({\n    type: t.ROOT_USER_PASSWORD_RESET_REQ,\n    payload: passwordResetStatus\n});\n\n/*------------- ROOT PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const passwordResetWithKey = (passwordResetMessage) => ({\n    type: t.ROOT_USER_PASSWORD_RESET,\n    payload: passwordResetMessage\n});\n\nexport const passwordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n    type: t.ROOT_PASSWORD_RESET_WATCHER,\n    payload: {\n        password: newPassword,\n        key: passwordResetKey\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*--------------------------LOG IN PRACTICE ------------------------*/\n\nexport const loginPractice = (email, password, router) => {\n\n    return {\n        type: t.PRACTICE_LOGIN_WATCHER,\n        payload: { email, password, router }\n    }\n    \n};\n\nexport const loginPracticeSuccess = (userData) => {\n\n    console.log(\"Reducer action for login called \")\n\n    return {\n        type: t.PRACTICE_USER_LOGIN,\n        payload: userData    \n    }\n    \n};\n\n\nexport const logoutPractice = () => {\n\n    return {\n        type: t.PRACTICE_USER_LOGOUT\n    }\n};\n\nexport const logoutPracticeSaga = (router) => {\n\n    return {\n        type: t.PRACTICE_LOGOUT_WATCHER,\n        payload: router\n    }\n    \n};\n\n\n\n/* --------------------------- PRACTICE PASSWORD RESET ---------------------------*/\n\n\nexport const practiceForgetPasswordRequestSaga = (email) => {\n    \n    return{\n        type: t.PRACTICE_USER_PASSWORD_RESET_REQ_WATCHER,\n        payload: { email }\n    }\n    \n}\n\nexport const practiceForgetPasswordRequest = (passwordResetStatus) => ({\n    type: t.PRACTICE_USER_PASSWORD_RESET_REQ,\n    payload: passwordResetStatus\n});\n\n/*------------- PRACTICE PASSWORD RESET WITH KEY ACTIONS -----------------*/\n\nexport const practicePasswordResetWithKey = (passwordResetMessage) => ({\n    type: t.PRACTICE_USER_PASSWORD_RESET,\n    payload: passwordResetMessage\n});\n\nexport const practicePasswordResetWithKeySaga = (passwordResetKey, newPassword) => ({\n    type: t.PRACTICE_PASSWORD_RESET_WATCHER,\n    payload: {\n        password: newPassword,\n        key: passwordResetKey\n    }\n});\n\n\n\n\n\nexport const apiError = (error) => ({\n    type: API_FAILED,\n    payload: error\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as t from \"../constants\";\nimport * as Api from '../Api.js';\nimport cookieCutter from 'cookie-cutter'; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* loginRootUser(action) {\n  try {\n    const user = yield call(Api.loginRootUser, action.payload);\n    yield put({\n      type: t.ROOT_USER_LOGIN,\n      user: user.root,\n      token: user.token\n    });\n    console.log(\"user has been loged in\");\n\n    if (user.message === \"Login successful\") {\n      yield call(() => {\n        cookieCutter.set('practx-token', user.token);\n      });\n      yield call(action.payload.history.push({\n        pathname: \"/dashboard/dashboard\",\n        query: user.token\n      }));\n    }\n  } catch (e) {\n    console.log(e, \"Can not login from saggaggaggag\");\n  }\n}\n\nfunction* mywatchLogin() {\n  yield takeLatest(\"RLOGIN\", loginRootUser);\n}\n\nexport default mywatchLogin;","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/saga/sagas.js"],"names":["call","put","takeEvery","takeLatest","t","Api","cookieCutter","loginRootUser","action","user","payload","type","ROOT_USER_LOGIN","root","token","console","log","message","set","history","push","pathname","query","e","mywatchLogin"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAO,KAAKC,CAAZ,MAAmB,cAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,eAAzB,C,CAEA;;AACA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAE7B,MAAI;AAEL,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACK,GAAG,CAACE,aAAL,EAAoBC,MAAM,CAACE,OAA3B,CAAvB;AAEE,UAAMT,GAAG,CAAC;AAACU,MAAAA,IAAI,EAAEP,CAAC,CAACQ,eAAT;AAA0BH,MAAAA,IAAI,EAAEA,IAAI,CAACI,IAArC;AAA2CC,MAAAA,KAAK,EAACL,IAAI,CAACK;AAAtD,KAAD,CAAT;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAEE,QAAIP,IAAI,CAACQ,OAAL,KAAiB,kBAArB,EAAwC;AAEpC,YAAMjB,IAAI,CACR,MAAI;AAACM,QAAAA,YAAY,CAACY,GAAb,CAAiB,cAAjB,EAAiCT,IAAI,CAACK,KAAtC;AAA6C,OAD1C,CAAV;AAIA,YAAMd,IAAI,CAACQ,MAAM,CAACE,OAAP,CAAeS,OAAf,CAAuBC,IAAvB,CAA4B;AACrCC,QAAAA,QAAQ,EAAC,sBAD4B;AAErCC,QAAAA,KAAK,EAAEb,IAAI,CAACK;AAFyB,OAA5B,CAAD,CAAV;AAIH;AAGH,GArBD,CAqBE,OAAOS,CAAP,EAAU;AACXR,IAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ,EAAe,iCAAf;AACA;AACH;;AAED,UAAUC,YAAV,GAAyB;AACvB,QAAMrB,UAAU,CAAC,QAAD,EAAWI,aAAX,CAAhB;AACD;;AAGD,eAAeiB,YAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as t from \"../constants\";\nimport * as Api from '../Api.js';\nimport cookieCutter from 'cookie-cutter';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* loginRootUser(action) {\n\n   try {\n\n\t\tconst user = yield call(Api.loginRootUser, action.payload);\n\n    yield put({type: t.ROOT_USER_LOGIN, user: user.root, token:user.token});\n\n    console.log(\"user has been loged in\")\n\n      if (user.message === \"Login successful\"){\n\n          yield call(\n            ()=>{cookieCutter.set('practx-token', user.token)}\n          );\n\n          yield call(action.payload.history.push({\n            pathname:\"/dashboard/dashboard\",\n            query: user.token\n          }));\n      }\n    \t\n\n   } catch (e) {\n\t   console.log(e, \"Can not login from saggaggaggag\")\n   }\n}\n\nfunction* mywatchLogin() {\n  yield takeLatest(\"RLOGIN\", loginRootUser);\n}\n\n\nexport default mywatchLogin;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n  try {\n    console.log(\"oooooo------\", action.payload);\n    const user = yield call(Api.loginRootUser, action.payload);\n\n    if (user.message === \"Login successful!\") {\n      console.log(\"oooooo------\", user);\n      yield put(Actions.loginRootUserSuccess(user.root, user.token));\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/dashboard/dashboard\"\n        });\n      });\n    } else {\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/\"\n        });\n      });\n    }\n  } catch (e) {\n    console.log(e, \"Can not login from saggaggaggag\");\n  }\n}\n\nfunction* rootLoginWatcher() {\n  /* --------------- LOGIN WATCHER ---------------------------*/\n  yield takeLatest(\"ROOT_LOGIN_WATCHER\", loginRootUser);\n}\n/*------------------------LOGOUTSAGA --------------------------------*/\n\n\nfunction* logoutRootUser() {\n  yield put({\n    type: t.ROOT_USER_LOGOUT\n  });\n}\n\nfunction* logoutWatcher() {\n  /* --------------- LOGIN WATCHER ---------------------------*/\n  yield takeLatest(\"LOGIN\", loginRootUser);\n}\n\nfunction* authSaga() {\n  yield all([fork(rootLoginWatcher), fork(logoutWatcher)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/auth/sagas.js"],"names":["call","put","takeEvery","takeLatest","all","fork","t","Api","Actions","loginRootUser","action","console","log","payload","user","message","loginRootUserSuccess","root","token","router","push","pathname","e","rootLoginWatcher","logoutRootUser","type","ROOT_USER_LOGOUT","logoutWatcher","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,EAAgDC,IAAhD,QAA2D,oBAA3D;AACA,OAAO,KAAKC,CAAZ,MAAmB,aAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAIA;;AAEA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAE7B,MAAI;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,MAAM,CAACG,OAAnC;AACF,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACO,GAAG,CAACE,aAAL,EAAoBC,MAAM,CAACG,OAA3B,CAAvB;;AAGE,QAAIC,IAAI,CAACC,OAAL,KAAiB,mBAArB,EAAyC;AAErCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BE,IAA5B;AAEA,YAAMb,GAAG,CAACO,OAAO,CAACQ,oBAAR,CAA6BF,IAAI,CAACG,IAAlC,EAAwCH,IAAI,CAACI,KAA7C,CAAD,CAAT;AAEA,YAAMlB,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACG,OAAP,CAAeM,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AASD,KAfH,MAeO;AAED,YAAMrB,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACG,OAAP,CAAeM,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AAQH;AAGH,GAjCD,CAiCE,OAAOC,CAAP,EAAU;AACXX,IAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ,EAAe,iCAAf;AACA;AACH;;AAED,UAAUC,gBAAV,GAA6B;AAAE;AAE7B,QAAMpB,UAAU,CAAC,oBAAD,EAAuBM,aAAvB,CAAhB;AAED;AAID;;;AAEA,UAAUe,cAAV,GAA2B;AAEvB,QAAMvB,GAAG,CAAC;AAACwB,IAAAA,IAAI,EAAEnB,CAAC,CAACoB;AAAT,GAAD,CAAT;AACH;;AAED,UAAUC,aAAV,GAA0B;AAAE;AAE1B,QAAMxB,UAAU,CAAC,OAAD,EAAUM,aAAV,CAAhB;AAED;;AAGD,UAAUmB,QAAV,GAAqB;AACjB,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACkB,gBAAD,CADE,EAENlB,IAAI,CAACsB,aAAD,CAFE,CAAD,CAAT;AAIH;;AAGD,eAAeC,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest, all, fork} from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n\n\n\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n\n   try {\n    console.log(\"oooooo------\", action.payload)\n\t\tconst user = yield call(Api.loginRootUser, action.payload);\n\n\n    if (user.message === \"Login successful!\"){\n\n        console.log(\"oooooo------\", user)\n\n        yield put(Actions.loginRootUserSuccess(user.root, user.token ));\n\n        yield call(()=>{\n\n                action.payload.router.push({\n                  pathname:\"/dashboard/dashboard\"\n                })\n\n            }\n        );\n\n      }else{\n\n          yield call(()=>{\n\n                  action.payload.router.push({\n                    pathname:\"/\"\n                  })\n\n              }\n          );\n      }\n    \t\n\n   } catch (e) {\n\t   console.log(e, \"Can not login from saggaggaggag\")\n   }\n}\n\nfunction* rootLoginWatcher() { /* --------------- LOGIN WATCHER ---------------------------*/\n\n  yield takeLatest(\"ROOT_LOGIN_WATCHER\", loginRootUser);\n\n}\n\n\n\n/*------------------------LOGOUTSAGA --------------------------------*/\n\nfunction* logoutRootUser() {\n\n    yield put({type: t.ROOT_USER_LOGOUT});\n}\n\nfunction* logoutWatcher() { /* --------------- LOGIN WATCHER ---------------------------*/\n\n  yield takeLatest(\"LOGIN\", loginRootUser);\n\n}\n\n\nfunction* authSaga() {\n    yield all([\n        fork(rootLoginWatcher),\n        fork(logoutWatcher),\n    ]);\n}\n\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}
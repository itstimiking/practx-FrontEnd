{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all, fork } from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n  try {\n    const user = yield call(Api.loginRootUser, action.payload);\n\n    if (user.message === \"Login successful!\") {\n      yield put(Actions.loginRootUserSuccess(user));\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/dashboard/dashboard\"\n        });\n      });\n    } else {\n      yield call(() => {\n        action.payload.router.push({\n          pathname: \"/\"\n        });\n      });\n    }\n  } catch (e) {\n    console.log(e, \"Can not login from saggaggaggag\");\n  }\n}\n\nfunction* rootLoginWatcher() {\n  /* --------------- LOGIN WATCHER ---------------------------*/\n  yield takeLatest(\"ROOT_LOGIN_WATCHER\", loginRootUser);\n}\n\nfunction* authSaga() {\n  yield all([fork(rootLoginWatcher)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["/home/timiking/Apps/practx/practxweb/src/redux/auth/sagas.js"],"names":["call","put","takeEvery","takeLatest","all","fork","t","Api","Actions","loginRootUser","action","user","payload","message","loginRootUserSuccess","router","push","pathname","e","console","log","rootLoginWatcher","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,EAAgDC,IAAhD,QAA2D,oBAA3D;AACA,OAAO,KAAKC,CAAZ,MAAmB,aAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAIA;;AAEA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAE7B,MAAI;AAEL,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACO,GAAG,CAACE,aAAL,EAAoBC,MAAM,CAACE,OAA3B,CAAvB;;AAGE,QAAID,IAAI,CAACE,OAAL,KAAiB,mBAArB,EAAyC;AAGrC,YAAMZ,GAAG,CAACO,OAAO,CAACM,oBAAR,CAA6BH,IAA7B,CAAD,CAAT;AAEA,YAAMX,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACE,OAAP,CAAeG,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AASD,KAdH,MAcO;AAED,YAAMjB,IAAI,CAAC,MAAI;AAEPU,QAAAA,MAAM,CAACE,OAAP,CAAeG,MAAf,CAAsBC,IAAtB,CAA2B;AACzBC,UAAAA,QAAQ,EAAC;AADgB,SAA3B;AAIH,OANK,CAAV;AAQH;AAGH,GAhCD,CAgCE,OAAOC,CAAP,EAAU;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAAe,iCAAf;AACA;AACH;;AAED,UAAUG,gBAAV,GAA6B;AAAE;AAE7B,QAAMlB,UAAU,CAAC,oBAAD,EAAuBM,aAAvB,CAAhB;AAED;;AASD,UAAUa,QAAV,GAAqB;AACjB,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACgB,gBAAD,CADE,CAAD,CAAT;AAGH;;AAGD,eAAeC,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest, all, fork} from 'redux-saga/effects';\nimport * as t from \"./constants\";\nimport * as Api from '../Api.js';\nimport * as Actions from \"./actions\";\n\n\n\n/*------------------------LOGIN SAGA --------------------------------*/\n\nfunction* loginRootUser(action) {\n\n   try {\n\n\t\tconst user = yield call(Api.loginRootUser, action.payload);\n\n\n    if (user.message === \"Login successful!\"){\n\n\n        yield put(Actions.loginRootUserSuccess(user));\n\n        yield call(()=>{\n\n                action.payload.router.push({\n                  pathname:\"/dashboard/dashboard\"\n                })\n\n            }\n        );\n\n      }else{\n\n          yield call(()=>{\n\n                  action.payload.router.push({\n                    pathname:\"/\"\n                  })\n\n              }\n          );\n      }\n    \t\n\n   } catch (e) {\n\t   console.log(e, \"Can not login from saggaggaggag\")\n   }\n}\n\nfunction* rootLoginWatcher() { /* --------------- LOGIN WATCHER ---------------------------*/\n\n  yield takeLatest(\"ROOT_LOGIN_WATCHER\", loginRootUser);\n\n}\n\n\n\n\n\n\n\n\nfunction* authSaga() {\n    yield all([\n        fork(rootLoginWatcher),\n    ]);\n}\n\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}